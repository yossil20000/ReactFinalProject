#!/usr/bin/env node

/**
 * Module dependencies.
 */
const httpType = 'http';
var app = require('./app');
var {findDeviceNextService} = require('./Services/schedulerService')
const { sendNotification } = require('./Services/notificationService');
const constants = require('./Models/constants')
var debug = require('debug')('FlightClub:server');
var https = require('https');
var http = require('http');
const fs = require("fs");
var log = require('debug-level').log('www');
const schedule = require('node-schedule');

if((globalThis.LastDate.lastCheck - new Date()) / (1000 * 60 *60 *24))
{
  console.log("globalThis.LastDate check",globalThis.LastDate.lastCheck)
  const {device} = findDeviceNextService({device_id: "4XCGC"})
  device.then((res) => {
    console.log("Scheduler device",(res.due_date - new Date()) / (1000 * 60 *60 *24),new Date(),(res.engien_meter - res.maintanance.next_meter) < 10, res.maintanance,res.engien_meter,res.due_date)
    if((res.due_date - new Date()) / (1000 * 60 *60 *24) < 14 || (res.maintanance.next_meter - res.engien_meter) < 10 )
      sendNotification(constants.NotifyEvent.ClubNotice,constants.NotifyOn.CREATED,`Service Soon ${res.maintanance.type} for ${res.device_id} . Current Engien: ${res.engien_meter} Next Service: on ${res.maintanance.next_meter} ${res.due_date}`)
      globalThis.LastDate.lastCheck = new Date()
  }).catch((error) => {
    console.log("Scheduler Error",error)
  })
}
const job = schedule.scheduleJob('0 0 22 * * *', function(){
  const {device} = findDeviceNextService({device_id: "4XCGC"})
  device.then((res) => {
    console.log("Scheduler device",(res.due_date - new Date()) / (1000 * 60 *60 *24),new Date(),(res.engien_meter - res.maintanance.next_meter) < 10, res.maintanance,res.engien_meter,res.due_date)
    if((res.due_date - new Date()) / (1000 * 60 *60 *24) < 14 || (res.maintanance.next_meter - res.engien_meter) < 10 )
      sendNotification(constants.NotifyEvent.ClubNotice,constants.NotifyOn.CREATED,`Service Soon ${res.maintanance.type} for ${res.device_id} . Current Engien: ${res.engien_meter} Next Service: on ${res.maintanance.next_meter} ${res.due_date}`)
  }).catch((error) => {
    console.log("Scheduler Error",error)
  })
  
})

/**
 * Get port from environment and store in Express.
 */

var env = require('dotenv').config();
/*  log.info(env); */
var port = normalizePort(process.env.PORT || '3003');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server;
if (httpType === 'https') {
  server = https.createServer(
    {
      key: fs.readFileSync("key.pem"),
      cert: fs.readFileSync("cert.pem"),
    },
    app);
    log.log(`server https ${server}`);
}
else {
  server = http.createServer(app);
  log.log(`server http ${server}`);
}
/**
 * Listen on provided port, on all network interfaces.
 */
server.on('error', onError);
server.on('listening', onListening);
/* server.listen(port, "localhost"); */
server.listen(port, process.env.ADDRESS);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

/* function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
 */
function onListening() {

  log.log(`Listening on ${server.address().address}::${server.address().port}`);
}